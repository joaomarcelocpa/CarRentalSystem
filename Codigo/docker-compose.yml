version: '3.8'

services:
  # Banco de dados H2 (em memória para desenvolvimento)
  # Para produção, considere usar PostgreSQL ou MySQL
  database:
    image: postgres:15-alpine
    container_name: rental-db
    environment:
      POSTGRES_DB: rental_system
      POSTGRES_USER: rental_user
      POSTGRES_PASSWORD: rental_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rental-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rental_user -d rental_system"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Spring Boot
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rental-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/rental_system
      SPRING_DATASOURCE_USERNAME: rental_user
      SPRING_DATASOURCE_PASSWORD: rental_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      APP_JWT_SECRET: mySecretKeyForDevelopment
      APP_JWT_EXPIRATION: 86400000
    volumes:
      # Volume para logs
      - backend_logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
    networks:
      - rental-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/test/public"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Frontend Next.js com hot reload
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: base  # Usar stage de desenvolvimento
    container_name: rental-frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080/api
      WATCHPACK_POLLING: true  # Para hot reload em ambientes Docker
    volumes:
      # Volume para hot reload - mapear código fonte
      - ./frontend:/app
      - /app/node_modules  # Excluir node_modules do volume
      - /app/.next         # Excluir build cache
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - rental-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Nginx como proxy reverso (opcional para produção)
  nginx:
    image: nginx:alpine
    container_name: rental-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Para certificados SSL
    depends_on:
      - frontend
      - backend
    networks:
      - rental-network
    profiles:
      - production  # Só inicia com --profile production

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local

networks:
  rental-network:
    driver: bridge
